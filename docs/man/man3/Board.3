.TH "Board" 3 "Sat Feb 20 2021" "S.S.E.H.C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Board
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <chessboard\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMoveList\fP< 256 > \fBlegal_moves\fP () const"
.br
.ti -1c
.RI "\fBMoveList\fP< 256 > \fBcapture_moves\fP () const"
.br
.ti -1c
.RI "bool \fBis_checking_move\fP (\fBCMove\fP mv) const"
.br
.ti -1c
.RI "int \fBsee\fP (\fBCMove\fP mv) const"
.br
.ti -1c
.RI "\fBCMove\fP \fBmove_from_src_dest\fP (\fBSquare\fP src, \fBSquare\fP dest) const"
.br
.ti -1c
.RI "\fBColor\fP \fBturn\fP () const"
.br
.ti -1c
.RI "\fBu64\fP \fBhash\fP () const"
.br
.ti -1c
.RI "\fBu64\fP \fBoccupancy\fP (\fBColor\fP color) const"
.br
.ti -1c
.RI "\fBu64\fP \fBoccupancy\fP () const"
.br
.ti -1c
.RI "bool \fBis_check\fP () const"
.br
.ti -1c
.RI "std::string \fBfen\fP () const"
.br
.ti -1c
.RI "bool \fBis_stalemate\fP () const"
.br
.ti -1c
.RI "bool \fBis_checkmate\fP () const"
.br
.ti -1c
.RI "\fBboard::Status\fP \fBstatus\fP ()"
.br
.ti -1c
.RI "void \fBReset\fP ()"
.br
.ti -1c
.RI "void \fBMakeMove\fP (\fBCMove\fP mv)"
.br
.ti -1c
.RI "void \fBUnmakeMove\fP ()"
.br
.ti -1c
.RI "void \fBLoadPosition\fP (\fBPieceType\fP piece_list[64], \fBColor\fP \fBturn\fP, int ep_square, \fBboard::castle::Rights\fP castling_rights, int fullmove, int halfmove)"
.br
.ti -1c
.RI "void \fBLoadPosition\fP (std::string \fBfen\fP)"
.br
.ti -1c
.RI "void \fBDump\fP ()"
.br
.ti -1c
.RI "\fBBoard\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class encapsulates a game of chess and the elements that comprise it as such\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Board::Board ()"
Default constructor\&. Loads the classical starting position\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBMoveList\fP< 256 > Board::capture_moves () const"
capture moves only, generated for q-search\&.
.PP
For this one and legal moves, consider not using precalculated attack maps\&.\&.\&. 
.SS "void Board::Dump ()"
Prints information to the console\&. 
.SS "std::string Board::fen () const"
Outputs the FEN as a string\&.
.PP
note to self: make sure that the move counter and other state elements are correctly outputted 
.SS "\fBu64\fP Board::hash () const"
Get the current hash\&. 
.SS "bool Board::is_check () const"
Is the board currently in check? 
.SS "bool Board::is_checking_move (\fBCMove\fP mv) const"
Does this move put the opponent in check?
.PP
Assuming a move is legal for a particular side, we want to know if it puts the opponent in check\&.
.PP
Hotspot 
.SS "bool Board::is_checkmate () const"
Returns true if for the current position it is checkmate (the opponent to who's move it is to play wins\&.) 
.SS "bool Board::is_stalemate () const"
if it isn't check, check for any legal moves 
.SS "\fBMoveList\fP< 256 > Board::legal_moves () const"
List of all true legal moves in a position\&. 
.SS "void Board::LoadPosition (\fBPieceType\fP piece_list[64], \fBColor\fP turn, int ep_square, \fBboard::castle::Rights\fP castling_rights, int fullmove, int halfmove)"
Loads a position from a list of pieces and complete list of state parameters\&.
.PP
This effectively acts as the constructor for the board\&. 
.SS "void Board::LoadPosition (std::string fen)"
Loads a position from a FEN string\&. 
.SS "void Board::MakeMove (\fBCMove\fP mv)"
Makes a move and changes state accordingly\&.s 
.SS "\fBCMove\fP Board::move_from_src_dest (\fBSquare\fP src, \fBSquare\fP dest) const"
Given a move source square and dest square, create a move with the correct metadata\&.
.PP
This is used in the UCI interface when loading a sequence of moves\&. 
.SS "\fBu64\fP Board::occupancy () const"
A bitboard mask of all pieces\&. 
.SS "\fBu64\fP Board::occupancy (\fBColor\fP color) const"
A bitboard mask of pieces for a particular color\&. 
.SS "void Board::Reset ()"
Sets the board to the classical starting position\&. 
.SS "int Board::see (\fBCMove\fP mv) const"
Static exchange evaluation 
.SS "\fBboard::Status\fP Board::status ()"
Whether the game is continuing, a win for a particular side, or drawn\&.
.PP
The value is cached and stored, though this may not be needed\&. 
.SS "\fBColor\fP Board::turn () const"
Which side is it to move?
.PP
Starts off as white by default\&. 
.SS "void Board::UnmakeMove ()"
Undoes the last move\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for S\&.S\&.E\&.H\&.C from the source code\&.
