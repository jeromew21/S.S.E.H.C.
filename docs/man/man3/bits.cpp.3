.TH "src/misc/bits.cpp" 3 "Mon Feb 22 2021" "S.S.E.H.C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/misc/bits.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <chrono>\fP
.br
\fC#include 'misc/bits\&.hpp'\fP
.br
\fC#include 'misc/debug\&.hpp'\fP
.br
\fC#include 'uci/utils\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "std::uniform_real_distribution< double > \fBunif\fP (0, 1)"
.br
.ti -1c
.RI "void \fBinit_bits\fP ()"
.br
.ti -1c
.RI "void \fBseedRand\fP (int seed)"
.br
.ti -1c
.RI "void \fBtimeSeedRand\fP ()"
.br
.ti -1c
.RI "float \fBrandReal\fP ()"
.br
.ti -1c
.RI "\fBu64\fP \fBrandomBits\fP ()"
.br
.ti -1c
.RI "int \fBhadd\fP (\fBu64\fP x)"
.br
.ti -1c
.RI "void \fBbitscanAll\fP (\fBu64\fP x, \fBu64List\fP &out_arr)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "std::mt19937_64 \fBrng\fP"
.br
.ti -1c
.RI "const \fBu64\fP \fBm1\fP = 0x5555555555555555"
.br
.ti -1c
.RI "const \fBu64\fP \fBm2\fP = 0x3333333333333333"
.br
.ti -1c
.RI "const \fBu64\fP \fBm4\fP = 0x0f0f0f0f0f0f0f0f"
.br
.ti -1c
.RI "const \fBu64\fP \fBh01\fP = 0x0101010101010101"
.br
.ti -1c
.RI "\fBu64\fP \fBbitscan_cache\fP [256][8][8]"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void bitscanAll (\fBu64\fP x, \fBu64List\fP & out_arr)"
Split a u64 into a list of singleton u64 values\&. 
.SS "int hadd (\fBu64\fP x)"
Source: https://en.wikipedia.org/wiki/Hamming_weight 
.SS "void init_bits ()"
Needs to be called in order to initialize the cache for \fBbitscanAll()\fP\&. 
.SS "\fBu64\fP randomBits ()"
Each bit in the output bitstring has a 50/50 chance of being 1 or 0\&. 
.SS "float randReal ()"
Return a random real [0, 1) 
.SS "void seedRand (int seed)"
Seed the RNG deterministically 
.SS "void timeSeedRand ()"
Seed the RNG w/ time 
.SS "std::uniform_real_distribution<double> unif (0, 1)"

.SH "Variable Documentation"
.PP 
.SS "\fBu64\fP bitscan_cache[256][8][8]"

.SS "const \fBu64\fP h01 = 0x0101010101010101"

.SS "const \fBu64\fP m1 = 0x5555555555555555"

.SS "const \fBu64\fP m2 = 0x3333333333333333"

.SS "const \fBu64\fP m4 = 0x0f0f0f0f0f0f0f0f"

.SS "std::mt19937_64 rng"

.SH "Author"
.PP 
Generated automatically by Doxygen for S\&.S\&.E\&.H\&.C from the source code\&.
