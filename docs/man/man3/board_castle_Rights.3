.TH "board::castle::Rights" 3 "Fri Feb 19 2021" "S.S.E.H.C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
board::castle::Rights
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <board_state\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRights\fP ()"
.br
.ti -1c
.RI "\fBRights\fP (int w_long, int w_short, int b_long, int b_short)"
.br
.ti -1c
.RI "int \fBget\fP (\fBColor\fP color, int direction) const"
.br
.ti -1c
.RI "void \fBSet\fP (\fBColor\fP color, int direction, int value)"
.br
.in -1c
.SH "Detailed Description"
.PP 
We encapsulate the castling values of the board in one class\&.
.PP
The value is true if the king hasn't moved, and for that direction, the rook hasn't moved, and the player has not castled\&.
.PP
In other words, the value is set to true if castling is allowed in a given direction\&. However the move generator may flag castling as illegal if there is a piece in the way, or it's check, etc\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "board::castle::Rights::Rights ()"
Default constructor sets all to true at start\&. 
.SS "board::castle::Rights::Rights (int w_long, int w_short, int b_long, int b_short)"

.SH "Member Function Documentation"
.PP 
.SS "int board::castle::Rights::get (\fBColor\fP color, int direction) const"

.SS "void board::castle::Rights::Set (\fBColor\fP color, int direction, int value)"


.SH "Author"
.PP 
Generated automatically by Doxygen for S\&.S\&.E\&.H\&.C from the source code\&.
