.TH "move_maps" 3 "Sat Feb 20 2021" "S.S.E.H.C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
move_maps
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP ()"
.br
.ti -1c
.RI "bool \fBisAttackedJumping\fP (\fBu64\fP occupancy_map, \fBu64\fP subject, \fBColor\fP subj_turn, \fBu64\fP knights, \fBu64\fP kings, \fBu64\fP pawns)"
.br
.ti -1c
.RI "bool \fBisAttackedSliding\fP (\fBu64\fP occupancy_map, \fBu64\fP subject, \fBu64\fP rooks, \fBu64\fP bishops)"
.br
.ti -1c
.RI "bool \fBisPromotingRank\fP (\fBSquare\fP piece_location, \fBColor\fP color)"
.br
.ti -1c
.RI "bool \fBisStartingRank\fP (\fBSquare\fP piece_location, \fBColor\fP color)"
.br
.ti -1c
.RI "\fBu64\fP \fBoneFileAdjacent\fP (\fBSquare\fP piece_location)"
.br
.ti -1c
.RI "\fBu64\fP \fBpawnCaptures\fP (\fBSquare\fP piece_location, \fBColor\fP color)"
.br
.ti -1c
.RI "\fBu64\fP \fBpawnMoves\fP (\fBSquare\fP piece_location, \fBColor\fP color)"
.br
.ti -1c
.RI "\fBu64\fP \fBpawnDoubleMoves\fP (\fBSquare\fP piece_location, \fBColor\fP color)"
.br
.ti -1c
.RI "\fBu64\fP \fBknightMoves\fP (\fBSquare\fP piece_location)"
.br
.ti -1c
.RI "\fBu64\fP \fBkingMoves\fP (\fBSquare\fP piece_location)"
.br
.ti -1c
.RI "\fBu64\fP \fBbishopMoves\fP (\fBSquare\fP piece_location, \fBu64\fP occupants)"
.br
.ti -1c
.RI "\fBu64\fP \fBrookMoves\fP (\fBSquare\fP piece_location, \fBu64\fP occupants)"
.br
.ti -1c
.RI "\fBu64\fP \fBbishopRay\fP (\fBSquare\fP piece_location, int direction)"
.br
.ti -1c
.RI "\fBu64\fP \fBrookRay\fP (\fBSquare\fP piece_location, int direction)"
.br
.ti -1c
.RI "\fBu64\fP \fBrookRay\fP (\fBSquare\fP piece_location)"
.br
.ti -1c
.RI "\fBu64\fP \fBbishopRay\fP (\fBSquare\fP piece_location)"
.br
.in -1c
.SH "Detailed Description"
.PP 
In order to generate pseudo-legal (moves that are legal irregardless of check) we need to first determine the rules of movement for a given piece\&.
.PP
This namespace provides functions that do just that\&. 
.SH "Function Documentation"
.PP 
.SS "\fBu64\fP move_maps::bishopMoves (\fBSquare\fP piece_location, \fBu64\fP occupants)"
Returns a bitboard of bishop moves at given location and occupancy map\&.
.PP
Uses magic bitboards\&.
.PP
There is a bug with magic bitboards for some reason so for now we will use the naive approach 
.SS "\fBu64\fP move_maps::bishopRay (\fBSquare\fP piece_location)"
Returns all four rays emanating from a location\&. 
.SS "\fBu64\fP move_maps::bishopRay (\fBSquare\fP piece_location, int direction)"
Returns the single bishop ray from a particular direction 
.SS "void move_maps::init ()"
needed to find magic numbers for hashing 
.SS "bool move_maps::isAttackedJumping (\fBu64\fP occupancy_map, \fBu64\fP subject, \fBColor\fP subj_turn, \fBu64\fP knights, \fBu64\fP kings, \fBu64\fP pawns)"
given an occupancy map, subject location (can only contain 1 bit for now), and location of jumping (non-sliding) pieces, check if the king is under attack by any of those pieces 
.SS "bool move_maps::isAttackedSliding (\fBu64\fP occupancy_map, \fBu64\fP subject, \fBu64\fP rooks, \fBu64\fP bishops)"
given an occupancy map, subject location (can only contain 1 bit for now), and location of sliding pieces, check if the king is under attack by any of those sliding pieces 
.SS "bool move_maps::isPromotingRank (\fBSquare\fP piece_location, \fBColor\fP color)"
Rank 0 for Black
.PP
Rank 7 for White 
.SS "bool move_maps::isStartingRank (\fBSquare\fP piece_location, \fBColor\fP color)"
Rank 6 for Black
.PP
Rank 1 for White 
.SS "\fBu64\fP move_maps::kingMoves (\fBSquare\fP piece_location)"
Returns a bitboard of king moves at given location\&. 
.SS "\fBu64\fP move_maps::knightMoves (\fBSquare\fP piece_location)"
Returns a bitboard of knight moves at given location\&. 
.SS "\fBu64\fP move_maps::oneFileAdjacent (\fBSquare\fP piece_location)"
Returns the squares exactly one file adjacent to the current one\&. Really only used for en passant\&. 
.SS "\fBu64\fP move_maps::pawnCaptures (\fBSquare\fP piece_location, \fBColor\fP color)"
Returns a bitboard of pawn captures at given location\&. 
.SS "\fBu64\fP move_maps::pawnDoubleMoves (\fBSquare\fP piece_location, \fBColor\fP color)"
Returns a bitboard of pawn double moves at given location\&.
.PP
Always a quiet move\&. 
.SS "\fBu64\fP move_maps::pawnMoves (\fBSquare\fP piece_location, \fBColor\fP color)"
Returns a bitboard of pawn forward moves at given location\&.
.PP
Always a quiet move\&. 
.SS "\fBu64\fP move_maps::rookMoves (\fBSquare\fP piece_location, \fBu64\fP occupants)"
Returns a bitboard of rook moves at given location and occupancy map\&.
.PP
Uses magic bitboards\&. 
.SS "\fBu64\fP move_maps::rookRay (\fBSquare\fP piece_location)"
Returns all four rays emanating from a location\&. 
.SS "\fBu64\fP move_maps::rookRay (\fBSquare\fP piece_location, int direction)"
Returns the single rook ray from a particular direction 
.SH "Author"
.PP 
Generated automatically by Doxygen for S\&.S\&.E\&.H\&.C from the source code\&.
