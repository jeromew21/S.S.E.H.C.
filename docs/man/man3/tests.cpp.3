.TH "src/tests/tests.cpp" 3 "Mon Feb 22 2021" "S.S.E.H.C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/tests/tests.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'tests/tests\&.hpp'\fP
.br
\fC#include 'game/chessboard\&.hpp'\fP
.br
\fC#include 'uci/strings\&.hpp'\fP
.br
\fC#include 'misc/perft\&.hpp'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRESET\fP   '\\033[0m'"
.br
.ti -1c
.RI "#define \fBRED\fP   '\\033[31m'   /* Red */"
.br
.ti -1c
.RI "#define \fBGREEN\fP   '\\033[32m' /* Green */"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBexpect\fP (int ground_truth, int value, std::string const &message, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBposition_load_test\fP (std::string const &fen, int legal_count, bool is_check, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBposition_mate_test\fP (std::string const &fen, bool is_mate, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBposition_stalemate_test\fP (std::string const &fen, bool is_mate, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBSEE_test\fP (std::string const &fen, \fBSquare\fP src, \fBSquare\fP dest, int score, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBperft4_test\fP (int depth, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBperft_tricky_test\fP (int depth, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBperft_kiwipete_test\fP (int depth, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBperft_classical_test\fP (int depth, int &total_cases, int &passes)"
.br
.ti -1c
.RI "void \fBbanner\fP (std::string const &message)"
.br
.ti -1c
.RI "void \fBrun_tests\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const int \fBperft_classical_nodes\fP [6] = {1, 20, 400, 8902, 197281, 4865609}"
.br
.ti -1c
.RI "const int \fBperft_classical_captures\fP [6] = {0, 0, 0, 34, 1576, 82719}"
.br
.ti -1c
.RI "const int \fBperft_classical_checks\fP [6] = {0, 0, 0, 12, 469, 27351}"
.br
.ti -1c
.RI "const int \fBperft_classical_mates\fP [6] = {0, 0, 0, 0, 8, 347}"
.br
.ti -1c
.RI "const int \fBperft_kp_nodes\fP [6] = {0, 48, 2039, 97862, 4085603, 193690690}"
.br
.ti -1c
.RI "const int \fBperft_kp_captures\fP [6] = {0, 8, 351, 17102, 757163, 35043416}"
.br
.ti -1c
.RI "const int \fBperft_kp_eps\fP [6] = {0, 0, 1, 45, 1929, 73365}"
.br
.ti -1c
.RI "const int \fBperft_kp_castles\fP [6] = {0, 2, 91, 3162, 128013, 4993637}"
.br
.ti -1c
.RI "const int \fBperft_kp_promos\fP [6] = {0, 0, 0, 0, 15172, 8392}"
.br
.ti -1c
.RI "const int \fBperft_kp_checks\fP [6] = {0, 0, 3, 993, 25523, 3309887}"
.br
.ti -1c
.RI "const int \fBperft_kp_mates\fP [6] = {0, 0, 0, 1, 43, 30171}"
.br
.ti -1c
.RI "const int \fBperft_tricky_nodes\fP [6] = {0, 44, 1486, 62379, 2103487, 89941194}"
.br
.ti -1c
.RI "const int \fBperft_test4_nodes\fP [5] = {0, 6, 264, 9467, 422333}"
.br
.ti -1c
.RI "const int \fBperft_test4_mates\fP [5] = {0, 0, 0, 22, 5}"
.br
.ti -1c
.RI "const int \fBperft_test4_promotions\fP [5] = {0, 0, 48, 120, 60032}"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define GREEN   '\\033[32m' /* Green */"

.SS "#define RED   '\\033[31m'   /* Red */"

.SS "#define RESET   '\\033[0m'"

.SH "Function Documentation"
.PP 
.SS "void banner (std::string const & message)"

.SS "void expect (int ground_truth, int value, std::string const & message, int & total_cases, int & passes)"

.SS "void perft4_test (int depth, int & total_cases, int & passes)"

.SS "void perft_classical_test (int depth, int & total_cases, int & passes)"
tests move generator expanding entire tree
.PP
classical starting position 
.SS "void perft_kiwipete_test (int depth, int & total_cases, int & passes)"
tests move by expanding entire tree
.PP
KIWIPETE position 
.SS "void perft_tricky_test (int depth, int & total_cases, int & passes)"

.SS "void position_load_test (std::string const & fen, int legal_count, bool is_check, int & total_cases, int & passes)"
tests based on loading a FEN and comparing state to precalculated values 
.SS "void position_mate_test (std::string const & fen, bool is_mate, int & total_cases, int & passes)"
tests based on loading a FEN and comparing state to precalculated values 
.SS "void position_stalemate_test (std::string const & fen, bool is_mate, int & total_cases, int & passes)"
tests based on loading a FEN and comparing state to precalculated values 
.SS "void run_tests ()"

.SS "void SEE_test (std::string const & fen, \fBSquare\fP src, \fBSquare\fP dest, int score, int & total_cases, int & passes)"

.SH "Variable Documentation"
.PP 
.SS "const int perft_classical_captures[6] = {0, 0, 0, 34, 1576, 82719}"

.SS "const int perft_classical_checks[6] = {0, 0, 0, 12, 469, 27351}"

.SS "const int perft_classical_mates[6] = {0, 0, 0, 0, 8, 347}"

.SS "const int perft_classical_nodes[6] = {1, 20, 400, 8902, 197281, 4865609}"

.SS "const int perft_kp_captures[6] = {0, 8, 351, 17102, 757163, 35043416}"

.SS "const int perft_kp_castles[6] = {0, 2, 91, 3162, 128013, 4993637}"

.SS "const int perft_kp_checks[6] = {0, 0, 3, 993, 25523, 3309887}"

.SS "const int perft_kp_eps[6] = {0, 0, 1, 45, 1929, 73365}"

.SS "const int perft_kp_mates[6] = {0, 0, 0, 1, 43, 30171}"

.SS "const int perft_kp_nodes[6] = {0, 48, 2039, 97862, 4085603, 193690690}"

.SS "const int perft_kp_promos[6] = {0, 0, 0, 0, 15172, 8392}"

.SS "const int perft_test4_mates[5] = {0, 0, 0, 22, 5}"

.SS "const int perft_test4_nodes[5] = {0, 6, 264, 9467, 422333}"

.SS "const int perft_test4_promotions[5] = {0, 0, 48, 120, 60032}"

.SS "const int perft_tricky_nodes[6] = {0, 44, 1486, 62379, 2103487, 89941194}"

.SH "Author"
.PP 
Generated automatically by Doxygen for S\&.S\&.E\&.H\&.C from the source code\&.
