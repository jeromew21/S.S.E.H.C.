#include "game/chessboard.hpp"

const u64 BISHOP_RAY_CACHE[4][256] = {{0x0, 0x100, 0x10200, 0x1020400, 0x102040800, 0x10204081000, 0x1020408102000,
                                       0x102040810204000, 0x0, 0x10000, 0x1020000, 0x102040000, 0x10204080000, 0x1020408100000,
                                       0x102040810200000, 0x204081020400000, 0x0, 0x1000000, 0x102000000, 0x10204000000,
                                       0x1020408000000, 0x102040810000000, 0x204081020000000, 0x408102040000000, 0x0,
                                       0x100000000, 0x10200000000, 0x1020400000000, 0x102040800000000, 0x204081000000000,
                                       0x408102000000000, 0x810204000000000, 0x0, 0x10000000000, 0x1020000000000,
                                       0x102040000000000, 0x204080000000000, 0x408100000000000, 0x810200000000000,
                                       0x1020400000000000, 0x0, 0x1000000000000, 0x102000000000000, 0x204000000000000,
                                       0x408000000000000, 0x810000000000000, 0x1020000000000000, 0x2040000000000000, 0x0,
                                       0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
                                       0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x0, 0x0, 0x0, 0x0,
                                       0x0, 0x0, 0x0, 0x0},
                                      {0x8040201008040200, 0x80402010080400, 0x804020100800, 0x8040201000, 0x80402000,
                                       0x804000, 0x8000, 0x0, 0x4020100804020000, 0x8040201008040000, 0x80402010080000,
                                       0x804020100000, 0x8040200000, 0x80400000, 0x800000, 0x0, 0x2010080402000000,
                                       0x4020100804000000, 0x8040201008000000, 0x80402010000000, 0x804020000000,
                                       0x8040000000, 0x80000000, 0x0, 0x1008040200000000, 0x2010080400000000,
                                       0x4020100800000000, 0x8040201000000000, 0x80402000000000, 0x804000000000,
                                       0x8000000000, 0x0, 0x804020000000000, 0x1008040000000000, 0x2010080000000000,
                                       0x4020100000000000, 0x8040200000000000, 0x80400000000000, 0x800000000000, 0x0,
                                       0x402000000000000, 0x804000000000000, 0x1008000000000000, 0x2010000000000000,
                                       0x4020000000000000, 0x8040000000000000, 0x80000000000000, 0x0, 0x200000000000000,
                                       0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000,
                                       0x4000000000000000, 0x8000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                                      {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,
                                       0x0, 0x204, 0x408, 0x810, 0x1020, 0x2040, 0x4080, 0x8000, 0x0, 0x20408, 0x40810,
                                       0x81020, 0x102040, 0x204080, 0x408000, 0x800000, 0x0, 0x2040810, 0x4081020,
                                       0x8102040, 0x10204080, 0x20408000, 0x40800000, 0x80000000, 0x0, 0x204081020,
                                       0x408102040, 0x810204080, 0x1020408000, 0x2040800000, 0x4080000000, 0x8000000000,
                                       0x0, 0x20408102040, 0x40810204080, 0x81020408000, 0x102040800000, 0x204080000000,
                                       0x408000000000, 0x800000000000, 0x0, 0x2040810204080, 0x4081020408000, 0x8102040800000,
                                       0x10204080000000, 0x20408000000000, 0x40800000000000, 0x80000000000000, 0x0},
                                      {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20,
                                       0x40, 0x0, 0x100, 0x201, 0x402, 0x804, 0x1008, 0x2010, 0x4020, 0x0, 0x10000,
                                       0x20100, 0x40201, 0x80402, 0x100804, 0x201008, 0x402010, 0x0, 0x1000000, 0x2010000,
                                       0x4020100, 0x8040201, 0x10080402, 0x20100804, 0x40201008, 0x0, 0x100000000,
                                       0x201000000, 0x402010000, 0x804020100, 0x1008040201, 0x2010080402, 0x4020100804,
                                       0x0, 0x10000000000, 0x20100000000, 0x40201000000, 0x80402010000, 0x100804020100,
                                       0x201008040201, 0x402010080402, 0x0, 0x1000000000000, 0x2010000000000, 0x4020100000000,
                                       0x8040201000000, 0x10080402010000, 0x20100804020100, 0x40201008040201}};

const u64 ROOKS_RAY_CACHE[4][256] = {{0x101010101010100, 0x202020202020200, 0x404040404040400, 0x808080808080800,
                                      0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000,
                                      0x101010101010000, 0x202020202020000, 0x404040404040000, 0x808080808080000,
                                      0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000,
                                      0x101010101000000, 0x202020202000000, 0x404040404000000, 0x808080808000000,
                                      0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000,
                                      0x101010100000000, 0x202020200000000, 0x404040400000000, 0x808080800000000,
                                      0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000,
                                      0x101010000000000, 0x202020000000000, 0x404040000000000, 0x808080000000000,
                                      0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000,
                                      0x101000000000000, 0x202000000000000, 0x404000000000000, 0x808000000000000,
                                      0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000,
                                      0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
                                      0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
                                      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                                     {0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x0, 0xfe00, 0xfc00, 0xf800, 0xf000,
                                      0xe000, 0xc000, 0x8000, 0x0, 0xfe0000, 0xfc0000, 0xf80000, 0xf00000, 0xe00000,
                                      0xc00000, 0x800000, 0x0, 0xfe000000, 0xfc000000, 0xf8000000, 0xf0000000, 0xe0000000,
                                      0xc0000000, 0x80000000, 0x0, 0xfe00000000, 0xfc00000000, 0xf800000000, 0xf000000000,
                                      0xe000000000, 0xc000000000, 0x8000000000, 0x0, 0xfe0000000000, 0xfc0000000000,
                                      0xf80000000000, 0xf00000000000, 0xe00000000000, 0xc00000000000, 0x800000000000,
                                      0x0, 0xfe000000000000, 0xfc000000000000, 0xf8000000000000, 0xf0000000000000,
                                      0xe0000000000000, 0xc0000000000000, 0x80000000000000, 0x0, 0xfe00000000000000,
                                      0xfc00000000000000, 0xf800000000000000, 0xf000000000000000, 0xe000000000000000,
                                      0xc000000000000000, 0x8000000000000000, 0x0},
                                     {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,
                                      0x101, 0x202, 0x404, 0x808, 0x1010, 0x2020, 0x4040, 0x8080, 0x10101, 0x20202, 0x40404,
                                      0x80808, 0x101010, 0x202020, 0x404040, 0x808080, 0x1010101, 0x2020202, 0x4040404,
                                      0x8080808, 0x10101010, 0x20202020, 0x40404040, 0x80808080, 0x101010101, 0x202020202,
                                      0x404040404, 0x808080808, 0x1010101010, 0x2020202020, 0x4040404040, 0x8080808080,
                                      0x10101010101, 0x20202020202, 0x40404040404, 0x80808080808, 0x101010101010,
                                      0x202020202020, 0x404040404040, 0x808080808080, 0x1010101010101, 0x2020202020202,
                                      0x4040404040404, 0x8080808080808, 0x10101010101010, 0x20202020202020, 0x40404040404040,
                                      0x80808080808080},
                                     {0x0, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0x0, 0x100, 0x300, 0x700, 0xf00, 0x1f00,
                                      0x3f00, 0x7f00, 0x0, 0x10000, 0x30000, 0x70000, 0xf0000, 0x1f0000, 0x3f0000, 0x7f0000,
                                      0x0, 0x1000000, 0x3000000, 0x7000000, 0xf000000, 0x1f000000, 0x3f000000, 0x7f000000,
                                      0x0, 0x100000000, 0x300000000, 0x700000000, 0xf00000000, 0x1f00000000, 0x3f00000000,
                                      0x7f00000000, 0x0, 0x10000000000, 0x30000000000, 0x70000000000, 0xf0000000000,
                                      0x1f0000000000, 0x3f0000000000, 0x7f0000000000, 0x0, 0x1000000000000, 0x3000000000000,
                                      0x7000000000000, 0xf000000000000, 0x1f000000000000, 0x3f000000000000, 0x7f000000000000,
                                      0x0, 0x100000000000000, 0x300000000000000, 0x700000000000000, 0xf00000000000000,
                                      0x1f00000000000000, 0x3f00000000000000, 0x7f00000000000000}};

const u64 ROOK_ATTACK_CACHE[64] = {0x1010101010101fe, 0x2020202020202fd, 0x4040404040404fb, 0x8080808080808f7, 0x10101010101010ef, 0x20202020202020df,
                                   0x40404040404040bf, 0x808080808080807f, 0x10101010101fe01, 0x20202020202fd02, 0x40404040404fb04, 0x80808080808f708,
                                   0x101010101010ef10, 0x202020202020df20, 0x404040404040bf40, 0x8080808080807f80, 0x101010101fe0101, 0x202020202fd0202,
                                   0x404040404fb0404, 0x808080808f70808, 0x1010101010ef1010, 0x2020202020df2020, 0x4040404040bf4040, 0x80808080807f8080,
                                   0x1010101fe010101, 0x2020202fd020202, 0x4040404fb040404, 0x8080808f7080808, 0x10101010ef101010, 0x20202020df202020,
                                   0x40404040bf404040, 0x808080807f808080, 0x10101fe01010101, 0x20202fd02020202, 0x40404fb04040404, 0x80808f708080808,
                                   0x101010ef10101010, 0x202020df20202020, 0x404040bf40404040, 0x8080807f80808080, 0x101fe0101010101, 0x202fd0202020202,
                                   0x404fb0404040404, 0x808f70808080808, 0x1010ef1010101010, 0x2020df2020202020, 0x4040bf4040404040, 0x80807f8080808080,
                                   0x1fe010101010101, 0x2fd020202020202, 0x4fb040404040404, 0x8f7080808080808, 0x10ef101010101010, 0x20df202020202020,
                                   0x40bf404040404040, 0x807f808080808080, 0xfe01010101010101, 0xfd02020202020202, 0xfb04040404040404, 0xf708080808080808,
                                   0xef10101010101010, 0xdf20202020202020, 0xbf40404040404040, 0x7f80808080808080};

const u64 BISHOP_ATTACK_CACHE[64] = {0x8040201008040200, 0x80402010080500, 0x804020110a00, 0x8041221400, 0x182442800, 0x10204885000, 0x102040810a000,
                                     0x102040810204000, 0x4020100804020002, 0x8040201008050005, 0x804020110a000a, 0x804122140014, 0x18244280028,
                                     0x1020488500050, 0x102040810a000a0, 0x204081020400040, 0x2010080402000204, 0x4020100805000508, 0x804020110a000a11,
                                     0x80412214001422, 0x1824428002844, 0x102048850005088, 0x2040810a000a010, 0x408102040004020, 0x1008040200020408,
                                     0x2010080500050810, 0x4020110a000a1120, 0x8041221400142241, 0x182442800284482, 0x204885000508804, 0x40810a000a01008,
                                     0x810204000402010, 0x804020002040810, 0x1008050005081020, 0x20110a000a112040, 0x4122140014224180, 0x8244280028448201,
                                     0x488500050880402, 0x810a000a0100804, 0x1020400040201008, 0x402000204081020, 0x805000508102040, 0x110a000a11204080,
                                     0x2214001422418000, 0x4428002844820100, 0x8850005088040201, 0x10a000a010080402, 0x2040004020100804, 0x200020408102040,
                                     0x500050810204080, 0xa000a1120408000, 0x1400142241800000, 0x2800284482010000, 0x5000508804020100, 0xa000a01008040201,
                                     0x4000402010080402, 0x2040810204080, 0x5081020408000, 0xa112040800000, 0x14224180000000, 0x28448201000000, 0x50880402010000,
                                     0xa0100804020100, 0x40201008040201};

//need to fix rook edge masks
const u64 ROOK_MASKED_ATTACKS[64] = {0x101010101017e, 0x202020202027c, 0x404040404047a, 0x8080808080876, 0x1010101010106e, 0x2020202020205e, 0x4040404040403e,
                                     0x8080808080807e, 0x1010101017e00, 0x2020202027c00, 0x4040404047a00, 0x8080808087600, 0x10101010106e00, 0x20202020205e00, 
                                     0x40404040403e00, 0x80808080807e00, 0x10101017e0100, 0x20202027c0200, 0x40404047a0400, 0x8080808760800, 0x101010106e1000, 
                                     0x202020205e2000, 0x404040403e4000, 0x808080807e8000, 0x101017e010100, 0x202027c020200, 0x404047a040400, 0x8080876080800, 
                                     0x1010106e101000, 0x2020205e202000, 0x4040403e404000, 0x8080807e808000, 0x1017e01010100, 0x2027c02020200, 0x4047a04040400, 
                                     0x8087608080800, 0x10106e10101000, 0x20205e20202000, 0x40403e40404000, 0x80807e80808000, 0x17e0101010100, 0x27c0202020200, 
                                     0x47a0404040400, 0x8760808080800, 0x106e1010101000, 0x205e2020202000, 0x403e4040404000, 0x807e8080808000, 0x7e010101010100, 
                                     0x7c020202020200, 0x7a040404040400, 0x76080808080800, 0x6e101010101000, 0x5e202020202000, 0x3e404040404000, 0x7e808080808000, 
                                     0x7e01010101010100, 0x7c02020202020200, 0x7a04040404040400, 0x7608080808080800, 0x6e10101010101000, 0x5e20202020202000, 
                                     0x3e40404040404000, 0x7e80808080808000};

const u64 BISHOP_MASKED_ATTACKS[64] = {0x40201008040200, 0x402010080400, 0x4020100a00, 0x40221400, 0x2442800, 0x204085000, 0x20408102000,
                                       0x2040810204000, 0x20100804020000, 0x40201008040000, 0x4020100a0000, 0x4022140000, 0x244280000, 0x20408500000, 0x2040810200000,
                                       0x4081020400000, 0x10080402000200, 0x20100804000400, 0x4020100a000a00, 0x402214001400, 0x24428002800, 0x2040850005000,
                                       0x4081020002000, 0x8102040004000, 0x8040200020400, 0x10080400040800, 0x20100a000a1000, 0x40221400142200, 0x2442800284400,
                                       0x4085000500800, 0x8102000201000, 0x10204000402000, 0x4020002040800, 0x8040004081000, 0x100a000a102000, 0x22140014224000,
                                       0x44280028440200, 0x8500050080400, 0x10200020100800, 0x20400040201000, 0x2000204081000, 0x4000408102000, 0xa000a10204000,
                                       0x14001422400000, 0x28002844020000, 0x50005008040200, 0x20002010080400, 0x40004020100800, 0x20408102000, 0x40810204000,
                                       0xa1020400000, 0x142240000000, 0x284402000000, 0x500804020000, 0x201008040200, 0x402010080400, 0x2040810204000, 0x4081020400000,
                                       0xa102040000000, 0x14224000000000, 0x28440200000000, 0x50080402000000, 0x20100804020000, 0x40201008040200};

/**
 * the list of bishop magic numbers
 */
u64 BISHOP_MAGIC_NUMBERS[64] = {0x100420000431024,   0x280800101073404,   0x42000a00840802,   0xca800c0410c2,   0x81004290941c20,   0x400200450020250,   0x444a019204022084,   0x88610802202109a,   0x11210a0800086008,   0x400a08c08802801,   0x1301a0500111c808,   0x1280100480180404,   0x720009020028445,   0x91880a9000010a01,   0x31200940150802b2,   0x5119080c20000602,   0x242400a002448023,   0x4819006001200008,   0x222c10400020090,   0x302008420409004,   0x504200070009045,   0x210071240c02046,   0x1182219000022611,   0x400c50000005801,   0x4004010000113100,   0x2008121604819400,   0xc4a4010000290101,   0x404a000888004802,   0x8820c004105010,   0x28280100908300,   0x4c013189c0320a80,   0x42008080042080,   0x90803000c080840,   0x2180001028220,   0x1084002a040036,   0x212009200401,   0x128110040c84a84,   0x81488020022802,   0x8c0014100181,   0x2222013020082,   0xa00100002382c03,   0x1000280001005c02,   0x84801010000114c,   0x480410048000084,   0x21204420080020a,   0x2020010000424a10,   0x240041021d500141,   0x420844000280214,   0x29084a280042108,   0x84102a8080a20a49,   0x104204908010212,   0x40a20280081860c1,   0x3044000200121004,   0x1001008807081122,   0x50066c000210811,   0xe3001240f8a106,   0x940c0204030020d4,   0x619204000210826a,   0x2010438002b00a2,   0x884042004005802,   0xa90240000006404,   0x500d082244010008,   0x28190d00040014e0,   0x825201600c082444};
int BISHOP_MAGIC_SHIFTS[64];
u64 BISHOP_MAGIC_TABLE[64][4096];

/**
 * the list of rook magic numbers
 */
u64 ROOK_MAGIC_NUMBERS[64] = {0x2080020500400f0,   0x28444000400010,   0x20000a1004100014,   0x20010c090202006,   0x8408008200810004,   0x1746000808002,   0x2200098000808201,   0x12c0002080200041,   0x104000208e480804,   0x8084014008281008,   0x4200810910500410,   0x100014481c20400c,   0x4014a4040020808,   0x401002001010a4,   0x202000500010001,   0x8112808005810081,   0x40902108802020,   0x42002101008101,   0x459442200810c202,   0x81001103309808,   0x8110000080102,   0x8812806008080404,   0x104020000800101,   0x40a1048000028201,   0x4100ba0000004081,   0x44803a4003400109,   0xa010a00000030443,   0x91021a000100409,   0x4201e8040880a012,   0x22a000440201802,   0x30890a72000204,   0x10411402a0c482,   0x40004841102088,   0x40230000100040,   0x40100010000a0488,   0x1410100200050844,   0x100090808508411,   0x1410040024001142,   0x8840018001214002,   0x410201000098001,   0x8400802120088848,   0x2060080000021004,   0x82101002000d0022,   0x1001101001008241,   0x9040411808040102,   0x600800480009042,   0x1a020000040205,   0x4200404040505199,   0x2020081040080080,   0x40a3002000544108,   0x4501100800148402,   0x81440280100224,   0x88008000000804,   0x8084060000002812,   0x1840201000108312,   0x5080202000000141,   0x1042a180880281,   0x900802900c01040,   0x8205104104120,   0x9004220000440a,   0x8029510200708,   0x8008440100404241,   0x2420001111000bd,   0x4000882304000041};
int ROOK_MAGIC_SHIFTS[64];
u64 ROOK_MAGIC_TABLE[64][4096];

const u64 KNIGHT_MOVE_CACHE[64] = {0x20400, 0x50800, 0xa1100, 0x142200, 0x284400, 0x508800, 0xa01000,
                                   0x402000, 0x2040004, 0x5080008, 0xa110011, 0x14220022, 0x28440044,
                                   0x50880088, 0xa0100010, 0x40200020, 0x204000402, 0x508000805, 0xa1100110a,
                                   0x1422002214, 0x2844004428, 0x5088008850, 0xa0100010a0, 0x4020002040,
                                   0x20400040200, 0x50800080500, 0xa1100110a00, 0x142200221400, 0x284400442800,
                                   0x508800885000, 0xa0100010a000, 0x402000204000, 0x2040004020000,
                                   0x5080008050000, 0xa1100110a0000, 0x14220022140000, 0x28440044280000,
                                   0x50880088500000, 0xa0100010a00000, 0x40200020400000, 0x204000402000000,
                                   0x508000805000000, 0xa1100110a000000, 0x1422002214000000, 0x2844004428000000,
                                   0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000, 0x400040200000000,
                                   0x800080500000000, 0x1100110a00000000, 0x2200221400000000, 0x4400442800000000,
                                   0x8800885000000000, 0x100010a000000000, 0x2000204000000000, 0x4020000000000,
                                   0x8050000000000, 0x110a0000000000, 0x22140000000000, 0x44280000000000,
                                   0x88500000000000, 0x10a00000000000, 0x20400000000000};

const u64 KING_MOVE_CACHE[64] = {0x302, 0x705, 0xe0a, 0x1c14, 0x3828, 0x7050, 0xe0a0, 0xc040, 0x30203, 0x70507,
                                 0xe0a0e, 0x1c141c, 0x382838, 0x705070, 0xe0a0e0, 0xc040c0, 0x3020300, 0x7050700,
                                 0xe0a0e00, 0x1c141c00, 0x38283800, 0x70507000, 0xe0a0e000, 0xc040c000, 0x302030000,
                                 0x705070000, 0xe0a0e0000, 0x1c141c0000, 0x3828380000, 0x7050700000, 0xe0a0e00000,
                                 0xc040c00000, 0x30203000000, 0x70507000000, 0xe0a0e000000, 0x1c141c000000,
                                 0x382838000000, 0x705070000000, 0xe0a0e0000000, 0xc040c0000000, 0x3020300000000,
                                 0x7050700000000, 0xe0a0e00000000, 0x1c141c00000000, 0x38283800000000, 0x70507000000000,
                                 0xe0a0e000000000, 0xc040c000000000, 0x302030000000000, 0x705070000000000,
                                 0xe0a0e0000000000, 0x1c141c0000000000, 0x3828380000000000, 0x7050700000000000,
                                 0xe0a0e00000000000, 0xc040c00000000000, 0x203000000000000, 0x507000000000000,
                                 0xa0e000000000000, 0x141c000000000000, 0x2838000000000000, 0x5070000000000000,
                                 0xa0e0000000000000, 0x40c0000000000000};

const u64 PAWN_CAPTURE_CACHE[2][64] = {{0x200, 0x500, 0xa00, 0x1400, 0x2800, 0x5000, 0xa000, 0x4000,
                                        0x20000, 0x50000, 0xa0000, 0x140000, 0x280000, 0x500000, 0xa00000, 0x400000,
                                        0x2000000, 0x5000000, 0xa000000, 0x14000000, 0x28000000, 0x50000000, 0xa0000000, 0x40000000,
                                        0x200000000, 0x500000000, 0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 0xa000000000,
                                        0x4000000000, 0x20000000000, 0x50000000000, 0xa0000000000, 0x140000000000, 0x280000000000,
                                        0x500000000000, 0xa00000000000, 0x400000000000, 0x2000000000000, 0x5000000000000, 0xa000000000000,
                                        0x14000000000000, 0x28000000000000, 0x50000000000000, 0xa0000000000000, 0x40000000000000,
                                        0x200000000000000, 0x500000000000000, 0xa00000000000000, 0x1400000000000000, 0x2800000000000000,
                                        0x5000000000000000, 0xa000000000000000, 0x4000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                                       {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x5, 0xa, 0x14, 0x28, 0x50, 0xa0, 0x40, 0x200, 0x500,
                                        0xa00, 0x1400, 0x2800, 0x5000, 0xa000, 0x4000, 0x20000, 0x50000, 0xa0000, 0x140000, 0x280000,
                                        0x500000, 0xa00000, 0x400000, 0x2000000, 0x5000000, 0xa000000, 0x14000000, 0x28000000, 0x50000000,
                                        0xa0000000, 0x40000000, 0x200000000, 0x500000000, 0xa00000000, 0x1400000000, 0x2800000000,
                                        0x5000000000, 0xa000000000, 0x4000000000, 0x20000000000, 0x50000000000, 0xa0000000000,
                                        0x140000000000, 0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000, 0x2000000000000,
                                        0x5000000000000, 0xa000000000000, 0x14000000000000, 0x28000000000000, 0x50000000000000,
                                        0xa0000000000000, 0x40000000000000}};

const u64 PAWN_MOVE_CACHE[2][64] = {{0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000, 0x10000,
                                     0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000, 0x1000000, 0x2000000,
                                     0x4000000, 0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x100000000,
                                     0x200000000, 0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 0x4000000000,
                                     0x8000000000, 0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000, 0x100000000000,
                                     0x200000000000, 0x400000000000, 0x800000000000, 0x1000000000000, 0x2000000000000,
                                     0x4000000000000, 0x8000000000000, 0x10000000000000, 0x20000000000000, 0x40000000000000,
                                     0x80000000000000, 0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
                                     0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
                                     0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                                    {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,
                                     0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000, 0x10000, 0x20000, 0x40000,
                                     0x80000, 0x100000, 0x200000, 0x400000, 0x800000, 0x1000000, 0x2000000, 0x4000000,
                                     0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x100000000, 0x200000000,
                                     0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 0x4000000000, 0x8000000000,
                                     0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000, 0x100000000000,
                                     0x200000000000, 0x400000000000, 0x800000000000, 0x1000000000000, 0x2000000000000,
                                     0x4000000000000, 0x8000000000000, 0x10000000000000, 0x20000000000000, 0x40000000000000,
                                     0x80000000000000}};

const u64 PAWN_DOUBLE_CACHE[2][64] = {{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                       0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000,
                                       0x40000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                       0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                       0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                       0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                                      {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                       0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                       0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                       0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100000000,
                                       0x200000000, 0x400000000, 0x800000000, 0x1000000000, 0x2000000000,
                                       0x4000000000, 0x8000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}};

void move_maps::init()
{
  verbose_info("initializing move cache");

  // find magics
  // fill each combo with classically generated moves
  for (Square sq = 0; sq < 64; sq++)
  {
    // get each combo of blockers
    u64 mask = ROOK_MASKED_ATTACKS[sq];
    print_(std::to_string(sq));
    dump64(mask);
    dump64(mask*ROOK_MAGIC_NUMBERS[sq]);


  }
}

bool move_maps::isPromotingRank(Square piece_location, Color color)
{
  return (color == Black && squareToRow(piece_location) == 0) || (color == White && squareToRow(piece_location) == 7);
}

bool move_maps::isStartingRank(Square piece_location, Color color)
{
  return (color == Black && squareToRow(piece_location) == 6) || (color == White && squareToRow(piece_location) == 1);
}

u64 move_maps::pawnCaptures(Square piece_location, Color color)
{
  return PAWN_CAPTURE_CACHE[color][piece_location];
}

u64 move_maps::pawnDoubleMoves(Square piece_location, Color color)
{
  return PAWN_DOUBLE_CACHE[color][piece_location];
}

u64 move_maps::pawnMoves(Square piece_location, Color color)
{
  return PAWN_MOVE_CACHE[color][piece_location];
}

u64 move_maps::knightMoves(Square piece_location)
{
  return KNIGHT_MOVE_CACHE[piece_location];
}

u64 move_maps::kingMoves(Square piece_location)
{
  return KING_MOVE_CACHE[piece_location];
}

u64 move_maps::bishopMoves(Square piece_location, u64 occupants)
{
  // u64 blocking_mask = BISHOP_MASKED_ATTACKS[piece_location] & occupants;
  // u64 hash = (blocking_mask * BISHOP_MAGIC_NUMBERS[piece_location]) >> BISHOP_MAGIC_SHIFTS[piece_location];
  // return BISHOP_MAGIC_TABLE[piece_location][hash];
  return 0;
}

u64 move_maps::rookMoves(Square piece_location, u64 occupants)
{
  // u64 blocking_mask = ROOK_MASKED_ATTACKS[piece_location] & occupants;
  // u64 hash = (blocking_mask * ROOK_MAGIC_NUMBERS[piece_location]) >> ROOK_MAGIC_SHIFTS[piece_location];
  // return ROOK_MAGIC_TABLE[piece_location][hash];
  return 0;
}

u64 move_maps::bishopRays(Square piece_location)
{
  return BISHOP_ATTACK_CACHE[piece_location];
}

u64 move_maps::rookRays(Square piece_location)
{
  return ROOK_ATTACK_CACHE[piece_location];
}
